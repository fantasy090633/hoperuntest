[
 {
  "A_CONTENT": "下列说法正确的是", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:release会让retaincount减一", 
   "B:autorelease会让retaincount减一", 
   "C:autorelease pool会让retaincount减一"
  ]
 }, 
 {
  "A_CONTENT": "关于arc说法正确的是（）", 
  "B_ANSWER": "C,D", 
  "C_OPTIONS": [
   "A:不支持ios4.0及以下", 
   "B:不能实现dealloc函数", 
   "C:不能写release", 
   "D:不能写autorelease"
  ]
 }, 
 {
  "A_CONTENT": "\"//******- (void）getNSString(const NSString* inputString{    inputString = @\"\"\"test\"\"\";    return;}- (void){    NSString* a = @\"\"\"Main\"\"\";    NSString *aString = [NSString stringWithString:@\"\"\"%@\"\"\",getNSString(a)];    NSLog(@\"\"\"%@\\n\"\"\",aString);}*******// 以上输入结果是\"", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:NULL", 
   "B:Main", 
   "C:test", 
   "D:以上都不对"
  ]
 }, 
 {
  "A_CONTENT": "下面的哪个保留字不能作为函数的返回类型？（）", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:void", 
   "B:int", 
   "C:new", 
   "D:long"
  ]
 }, 
 {
  "A_CONTENT": "下列说法错误的是：", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:assign是直接赋值，不涉及引用计数问题", 
   "B:retain是指针拷贝，对对象进行retain操作之后将使原对象的引用计数＋1", 
   "C:copy是值拷贝，对一对象进行深拷贝操作之后将使原对象的引用计数＋1", 
   "D:copy属性只对实行了NSCopying协议的对象类型有效"
  ]
 }, 
 {
  "A_CONTENT": "Objective-C的有以下几种管理内存的方式？", 
  "B_ANSWER": "A,B,D", 
  "C_OPTIONS": [
   "A:ARC(自动内存计数)", 
   "B:手动管理内存计数", 
   "C:静态分析", 
   "D:自动释放池"
  ]
 }, 
 {
  "A_CONTENT": "如果定义了property （assign）UIView * member下面不会改变retaincount的是", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:self.member = aView;", 
   "B:member = aView;", 
   "C:[member retain];", 
   "D:[member release];"
  ]
 }, 
 {
  "A_CONTENT": "NSLog如何打印double类型", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:%f", 
   "B:%s", 
   "C:%c", 
   "D:%S"
  ]
 }, 
 {
  "A_CONTENT": "关于IOS切换后台运行的几种说法正确的是？", 
  "B_ANSWER": "B,C", 
  "C_OPTIONS": [
   "A:开辟分线程,后台可运行", 
   "B:注册VOIP,后台可运行", 
   "C:注册音乐播放，后台可运行", 
   "D:注册切换后台通知，后台可运行"
  ]
 }, 
 {
  "A_CONTENT": "objectivec是（）", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:动态语言", 
   "B:脚本语言", 
   "C:静态语言", 
   "D:机器语言"
  ]
 }, 
 {
  "A_CONTENT": "以下操作会引起程序crash的是（）", 
  "B_ANSWER": "A,B,D", 
  "C_OPTIONS": [
   "A:引用一个不存在的对象实例", 
   "B:调用一个没有实现的消息", 
   "C:给nil对象发消息", 
   "D:过度释放一个对象"
  ]
 }, 
 {
  "A_CONTENT": "objectivec中定义类的是（）", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:Categories", 
   "B:Protocol", 
   "C:Class", 
   "D:Interface"
  ]
 }, 
 {
  "A_CONTENT": "关于堆栈正确的说法是（）", 
  "B_ANSWER": "A,C", 
  "C_OPTIONS": [
   "A:对于栈来讲，是由编译器自动管理", 
   "B:对于堆来讲，是由编译器自动管理，无需我们手工控制", 
   "C:堆是动态分配的", 
   "D:堆是静态分配的"
  ]
 }, 
 {
  "A_CONTENT": "关于进程线程正确的是", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:进程有独立的地址空间", 
   "B:一个线程死掉就等于整个进程死掉", 
   "C:线程有自己的堆栈和局部变量", 
   "D:但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。"
  ]
 }, 
 {
  "A_CONTENT": "建一个iPhone工程用到最基本的两个框架是什么", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:Function框架", 
   "B:UIKit框架", 
   "C:QuartzCore框架", 
   "D:CoreGraphics框架"
  ]
 }, 
 {
  "A_CONTENT": "线程和进程的说法正确的是：", 
  "B_ANSWER": "A,C", 
  "C_OPTIONS": [
   "A:一个进程可以包含多个线程", 
   "B:一个线程可以包含多个进程", 
   "C:进程间可以通过IPC的方式共享数据", 
   "D:多进程与多线程是相同的概念"
  ]
 }, 
 {
  "A_CONTENT": "IOS工程中程序的入口时那个文件？", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:appDelegate.m", 
   "B:main.m", 
   "C:main.c", 
   "D:app.xib"
  ]
 }, 
 {
  "A_CONTENT": "\"Objective-C中，使视图，数据分离处理的设计模式是下列哪个   \"", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:MVC模式", 
   "B:介者模式", 
   "C:厂模式", 
   "D:离模式"
  ]
 }, 
 {
  "A_CONTENT": "程序设计的三种基本结构是（）", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:顺序，选择，循环", 
   "B:顺序，选择，逻辑", 
   "C:模块，转移，循环", 
   "D:网状，选择，逻辑"
  ]
 }, 
 {
  "A_CONTENT": "IOS Crash的原因可能有？", 
  "B_ANSWER": "A,D", 
  "C_OPTIONS": [
   "A:操作野指针", 
   "B:访问了nil对象", 
   "C:使用了私有API", 
   "D:内存泄露"
  ]
 }, 
 {
  "A_CONTENT": "NSAttributedString是在哪个ios版本实现的（）", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:3", 
   "B:4", 
   "C:5", 
   "D:6"
  ]
 }, 
 {
  "A_CONTENT": "常用的流媒体协议有哪些？", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:MMS", 
   "B:RTSP", 
   "C:HLS", 
   "D:UDP"
  ]
 }, 
 {
  "A_CONTENT": "Objective-C的优点有哪些？", 
  "B_ANSWER": "C,D", 
  "C_OPTIONS": [
   "A:支持命名空间", 
   "B:支持多重继承", 
   "C:支持与C++混合编程", 
   "D:是C的衍生语言"
  ]
 }, 
 {
  "A_CONTENT": "objectivec中通知是那个类实现的（）", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:NSNotificationCenter", 
   "B:Message", 
   "C:NSAlert", 
   "D:以上都不对"
  ]
 }, 
 {
  "A_CONTENT": "uiview的坐标系的原点在哪", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:左上角", 
   "B:左下角", 
   "C:右上角", 
   "D:右下角"
  ]
 }, 
 {
  "A_CONTENT": " ViewController 的 loadView, viewDidLoad, viewDidUnload 有关调用说法正确的是?", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:loadView当view需要被展示而它却是nil时", 
   "B:viewDidLoad 当view从nib文件初始化时", 
   "C:viewDidUnload当系统内存吃紧时", 
   "D:viewDidUnload和dealloc方法没有关联"
  ]
 }, 
 {
  "A_CONTENT": "有关Info.plist文件，下列说法正确的是？", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:Bundle version 应用程序版本号", 
   "B:Bundle identifier 表示应用程序的唯一身份", 
   "C:Icon file 表示应用程序显示的图标文件", 
   "D:InfoDictionary version Plist的版本信息"
  ]
 }, 
 {
  "A_CONTENT": "画图函数的坐标系", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:左上角", 
   "B:左下角", 
   "C:右上角", 
   "D:右下角"
  ]
 }, 
 {
  "A_CONTENT": "若需要用形参直接访问实参时，应将形参变量说明为（）", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:值", 
   "B:函数", 
   "C:指针", 
   "D:引用"
  ]
 }, 
 {
  "A_CONTENT": "Ojbective-C中，子类从父类所继承的有：", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:类变量", 
   "B:基本类型变量", 
   "C:类方法", 
   "D:以上都不是"
  ]
 }, 
 {
  "A_CONTENT": "对于视网膜屏的应用程序贴图name.png如何适配？", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:使用name@2x.png命名高分辨率图片", 
   "B:使用name@4x.png命名高分辨率图片", 
   "C:使用name-@2x.xpng命名高分辨率图片", 
   "D:使用name-@4x.png命名高分辨率图片"
  ]
 }, 
 {
  "A_CONTENT": "下面哪种不是MVC设计模式需要考虑的？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:型对象", 
   "B:图对象", 
   "C:制器对象", 
   "D:输器对象"
  ]
 }, 
 {
  "A_CONTENT": "ios支持哪些音频格式（）", 
  "B_ANSWER": "B,C,D", 
  "C_OPTIONS": [
   "A:wma", 
   "B:aac", 
   "C:ulaw", 
   "D:mp3"
  ]
 }, 
 {
  "A_CONTENT": "objective-c中定义静态方法使用是什么修饰", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:static", 
   "B:+", 
   "C:-", 
   "D:[]"
  ]
 }, 
 {
  "A_CONTENT": "若一个类在声明中实现了一个协议，则", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:该类必须实现协议中所有方法", 
   "B:该类不必实现协议中任何方法", 
   "C:该类须实现协议中标记@required的方法", 
   "D:该类须实现协议中标记@optional的方法"
  ]
 }, 
 {
  "A_CONTENT": "IOS 的模拟器的虚拟cpu架构是什么？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:ARM v6", 
   "B:ARM V7", 
   "C:ARM V6、V7,V7s", 
   "D:X86"
  ]
 }, 
 {
  "A_CONTENT": "以下说法正确的是（）", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:类名(不包括类别和协议名)应该用大写开头的驼峰命名法。", 
   "B:方法使用小写开头的驼峰法命名。", 
   "C:每个参数都应该小写开头。", 
   "D:以上说法都不正确"
  ]
 }, 
 {
  "A_CONTENT": "int i = 15; (float)i/2的结果是？", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:浮点型，结果为7.5", 
   "B:整型，结果为7", 
   "C:浮点型，结果为7", 
   "D:整型，结果为7.5"
  ]
 }, 
 {
  "A_CONTENT": "苹果自带的地图在ios6中使用的数据是哪家的", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:高德", 
   "B:百度", 
   "C:google", 
   "D:微软"
  ]
 }, 
 {
  "A_CONTENT": "下列哪些会使retainCount加1", 
  "B_ANSWER": "B,D", 
  "C_OPTIONS": [
   "A:release", 
   "B:retain", 
   "C:autorelease", 
   "D:alloc"
  ]
 }, 
 {
  "A_CONTENT": "下列NSString * test的比较操作正确的是（）", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:\"\"\"\"abc\"\"\" = test\"", 
   "B:@\"abc\" == test", 
   "C:test = @\"abc\"", 
   "D:以上都不正确"
  ]
 }, 
 {
  "A_CONTENT": "导入Objective-C或Objective-C++头文件", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:#import", 
   "B:#link", 
   "C:#include", 
   "D:#insert"
  ]
 }, 
 {
  "A_CONTENT": "iphone如何实现多重继承", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:多个基类", 
   "B:protocol", 
   "C:多个Categories", 
   "D:以上都不正确"
  ]
 }, 
 {
  "A_CONTENT": "类别（categories）是OC语言的新特性，关于类别说法正确的是？", 
  "B_ANSWER": "A,C", 
  "C_OPTIONS": [
   "A:类别可以扩展方法", 
   "B:类别可以扩展成员变量", 
   "C:类别中的方法与被扩展类中的方法重名，类别中的方法有高优先级", 
   "D:类别中的方法与被扩展中的方法重名，被扩展类中的方法有高优先级"
  ]
 }, 
 {
  "A_CONTENT": "以下哪一项正确声明了NSObject子类MyObject？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:@interface NSObject : MyObject", 
   "B:@interface MyObject <NSObject>", 
   "C:@interface MyObject (NSObject)", 
   "D:以上都不正确"
  ]
 }, 
 {
  "A_CONTENT": "对象间互相传递信息可以用哪些方法实现", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:delegate", 
   "B:消息中心", 
   "C:函数调用", 
   "D:初始化"
  ]
 }, 
 {
  "A_CONTENT": "如何修改属性实现UITextView的默认提示信息", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:font", 
   "B:placeholder", 
   "C:textColor", 
   "D:以上都不是"
  ]
 }, 
 {
  "A_CONTENT": "下列哪些操作会使对象的引用计数加1：", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:new", 
   "B:alloc", 
   "C:copy", 
   "D:retain"
  ]
 }, 
 {
  "A_CONTENT": "\"[btn addTarget:self action:@selector(zoomInAction:) forControlEvents:UIControlEventTouchUpInside];表示如何监听何种触摸事件？\"", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:滑动至按钮区域并松开", 
   "B:点击按钮并松开", 
   "C:双击按钮", 
   "D:滑动出按钮区域并松开"
  ]
 }, 
 {
  "A_CONTENT": "一个栈的输入为123，则下列不可能为栈的输出的序列为", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:231", 
   "B:321", 
   "C:312", 
   "D:123"
  ]
 }, 
 {
  "A_CONTENT": "关于对象的原子属性（atomicity）说法错误的是：", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:系统默认访问器是原子操作", 
   "B:atomic和nonatomic用来决定编译器生成的getter和setter是否为原子操作", 
   "C:将对象设置为nonatomic属性，在多个线程中访问时该属性可以有效地提高效率，节省资源", 
   "D:在多线程环境下，原子操作是无效的"
  ]
 }, 
 {
  "A_CONTENT": "下面关于static的说法正确的是：", 
  "B_ANSWER": "B,C,D", 
  "C_OPTIONS": [
   "A:函数体内static变量的作用范围为该函数，可以任意分配", 
   "B:在模块内的static函数只可以被这一模块内的其它函数调用", 
   "C:类中的static成员变量属于整个类所拥有，对累的所有对象只有一份拷贝", 
   "D:在类中的static成员函数属于整个类拥有"
  ]
 }, 
 {
  "A_CONTENT": "什么情况下需要使用多线程？", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:从网络上下载数据", 
   "B:播放音乐和视频", 
   "C:后台计算大数据", 
   "D:后台操作文件读写"
  ]
 }, 
 {
  "A_CONTENT": "下列那个是程序splash画面所用的图片名", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:Default.png", 
   "B:Icon.png", 
   "C:splash.png", 
   "D:init.png"
  ]
 }, 
 {
  "A_CONTENT": "基类和派生类分别可以称为", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:“大类”和“小类”", 
   "B:“父类”和“子类”", 
   "C:“小类”和“大类”", 
   "D:“子类”和“父类”"
  ]
 }, 
 {
  "A_CONTENT": "用于修饰协议方法的关键字有", 
  "B_ANSWER": "B,C", 
  "C_OPTIONS": [
   "A:@public", 
   "B:@optional", 
   "C:@required", 
   "D:@protected"
  ]
 }, 
 {
  "A_CONTENT": "下列类中，可以存放有序数组的是：", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:NSArray", 
   "B:NSMutableArray", 
   "C:NSSet", 
   "D:NSMutableSet"
  ]
 }, 
 {
  "A_CONTENT": "与alloc、retain语义相反的方法？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:dealloc、autorelease", 
   "B:release，dealloc", 
   "C:autorelease、dealloc", 
   "D:dealloc、release"
  ]
 }, 
 {
  "A_CONTENT": "哪些是可以进行dom解析xml", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:NSXML", 
   "B:libxml2", 
   "C:touchXML", 
   "D:GDataXML"
  ]
 }, 
 {
  "A_CONTENT": "关于arc说法正确的是（）", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:加快了程序的运行速度", 
   "B:可以完全防止程序crash", 
   "C:可以减少代码量", 
   "D:以上说法都不正确"
  ]
 }, 
 {
  "A_CONTENT": "以下哪些是属于视图类（）", 
  "B_ANSWER": "B,C", 
  "C_OPTIONS": [
   "A:NSString", 
   "B:UIView", 
   "C:UILabel", 
   "D:UIViewController"
  ]
 }, 
 {
  "A_CONTENT": "uiview支持多点触摸需要打开哪个属性（）", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:multipleTouchEnabled", 
   "B:opaque", 
   "C:subviews", 
   "D:tag"
  ]
 }, 
 {
  "A_CONTENT": "下列不属于UIWindow对象的窗口级别（windowLevel）的是：", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:UIWindowLevelNormal", 
   "B:UIWindowLevelAlert", 
   "C:UIWindowLevelStatusBar", 
   "D:UIWindowLevelNone"
  ]
 }, 
 {
  "A_CONTENT": "用哪种修饰符来标识一个变量才能够使得该变量被block改变？", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:@writeable", 
   "B:__writeable", 
   "C:__block", 
   "D:__unused"
  ]
 }, 
 {
  "A_CONTENT": "关于属性声明，以下说法错误的是？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:retian标识持有特性，setter方法将传入参数先保留，在赋值，传入参数的retiancount会+1。", 
   "B:assign是赋值特性，setter方法将传入参数赋值给实例变量，retiancount不加+。", 
   "C:copy表示赋值特性，setter方法将传入对象复制一份。", 
   "D:nonatomic非原子操作，线程安全；atomic表示非线程安全"
  ]
 }, 
 {
  "A_CONTENT": "NSInteger可表示以下哪些基本类型", 
  "B_ANSWER": "A,C", 
  "C_OPTIONS": [
   "A:int", 
   "B:unsigned int", 
   "C:long", 
   "D:usigned long"
  ]
 }, 
 {
  "A_CONTENT": "哪些是iphone开发中可写的目录", 
  "B_ANSWER": "B,C", 
  "C_OPTIONS": [
   "A:Resource目录", 
   "B:Document目录", 
   "C:tmp目录", 
   "D:home目录"
  ]
 }, 
 {
  "A_CONTENT": "iPhone上UINavigationBar对象在竖屏和横屏模式下分别占多少像素值（以320X480为准）：", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:44，44", 
   "B:44，32", 
   "C:32，32", 
   "D:32，44"
  ]
 }, 
 {
  "A_CONTENT": "对于第三方库，正确的是（）", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:可以加载静态包", 
   "B:可以加载动态包", 
   "C:静态动态包都可以加载", 
   "D:静态动态包都不可以加载"
  ]
 }, 
 {
  "A_CONTENT": "ViewController的 viewDidLoad，viewWillAppear，viewDidAppear的调用顺序：", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:viewDidLoad->viewWillAppear->viewDidAppear", 
   "B:viewWillAppear->viewDidLoad->viewDidAppear", 
   "C:viewDidAppear->viewWillAppear->viewWillAppear", 
   "D:viewWillAppear->viewDidAppear->viewDidLoad"
  ]
 }, 
 {
  "A_CONTENT": "dealloc方法会在以下情况下被调用：", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:引用计数为0；", 
   "B:每次调用release方法；", 
   "C:每次调用autorelease方法；", 
   "D:以上说法都不正确"
  ]
 }, 
 {
  "A_CONTENT": "以下说法正确的是（）", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:重载函数函数名相同", 
   "B:重载函数参数个数或类型相同", 
   "C:重载函数函数名不同", 
   "D:以上说法都不正确"
  ]
 }, 
 {
  "A_CONTENT": "造成死锁的必要条件是？", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:互斥", 
   "B:请求保持", 
   "C:不可剥夺", 
   "D:环路"
  ]
 }, 
 {
  "A_CONTENT": "常意义上的三层架构就是将整个业务应用划分为", 
  "B_ANSWER": "A,C,D", 
  "C_OPTIONS": [
   "A:表现层（UI）", 
   "B:网络层（NL）", 
   "C:业务逻辑层（BLL）", 
   "D:数据访问层（DAL）"
  ]
 }, 
 {
  "A_CONTENT": "如何修改属性实现UITextfield的默认提示信息", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:font", 
   "B:text", 
   "C:textColor", 
   "D:placeholder"
  ]
 }, 
 {
  "A_CONTENT": "NSLog如何打印int型", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:%s", 
   "B:%@", 
   "C:%d", 
   "D:%f"
  ]
 }, 
 {
  "A_CONTENT": "面向对象的三个基本特征是", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:封装，继承，多态", 
   "B:封装，重载，接口", 
   "C:接口、重载、多态", 
   "D:集合，继承，多态"
  ]
 }, 
 {
  "A_CONTENT": "selector可以叫做选择器，其实指的就是对象的方法，selecotor定义正确的是？", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:Selector sel;", 
   "B:Selector *sel;", 
   "C:SEL sel;", 
   "D:SEL *sel;"
  ]
 }, 
 {
  "A_CONTENT": "iPhone5的分辨率是多少：", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:320X480", 
   "B:640X960", 
   "C:640X1136", 
   "D:480X1136"
  ]
 }, 
 {
  "A_CONTENT": "下列哪项不是objective-c的优点", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:可以与C语言混编", 
   "B:动态识别", 
   "C:C 衍生语言", 
   "D:支持多重继承"
  ]
 }, 
 {
  "A_CONTENT": "下面哪些类的基类是UIView", 
  "B_ANSWER": "A,D", 
  "C_OPTIONS": [
   "A:UIImageView", 
   "B:UIImage", 
   "C:UIViewController", 
   "D:UIButton"
  ]
 }, 
 {
  "A_CONTENT": "类别的作用不正确的是？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:可以使本来需要在.h中声明的方法放到.m文件中声明，达到了可以使方法不对外公开", 
   "B:可以方便的扩展类，甚至系统类都可以轻易扩展，维护了代码原本的结构不受影响。", 
   "C:类别可以写到不同的.h或.m文件中，可以分散代码到跟类别的扩展功能想关联的地方，方便查看。", 
   "D:类别可以替代“继承”所有的能力"
  ]
 }, 
 {
  "A_CONTENT": "可以动态增加对象的是（）", 
  "B_ANSWER": "B,D", 
  "C_OPTIONS": [
   "A:NSArray", 
   "B:NSMutableArray", 
   "C:NSDictionary", 
   "D:NSMutableDictionary"
  ]
 }, 
 {
  "A_CONTENT": "AppDelegate.h中说法正确的是？", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:\"-  (void)applicationWillResignActive:(UIApplication *)application说明：当应用程序将要入非活动状态执行，在此期间，应用程序不接收消息或事件，比如来电话了\"", 
   "B:\"-  (void)applicationWillTerminate:(UIApplication *)application说明：当程序将要退出是被调用，通常是用来保存数据和一些退出前的清理工作。这个需要要设置UIApplicationExitsOnSuspend的键值。\"", 
   "C:\"-  (void)applicationDidReceiveMemoryWarning:(UIApplication *)application说明：iPhone设备只有有限的内存，如果为应用程序分配了太多内存操作系统会终止应用程序的运行，在终止前会执行这个方法，通常可以在这里进行内存清理工作防止程序被终止\"", 
   "D:\"-  (void)applicationDidFinishLaunching:(UIApplication*)application说明：当程序载入后执行\""
  ]
 }, 
 {
  "A_CONTENT": "定义类的关键字（）", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:@class", 
   "B:@protocol", 
   "C:@interface", 
   "D:@function"
  ]
 }, 
 {
  "A_CONTENT": "下列变量名中，合法的是：", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:Int", 
   "B:_calloc", 
   "C:6_05", 
   "D:_1024"
  ]
 }, 
 {
  "A_CONTENT": "NSLog如何打印unsigned char型数组", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:%f", 
   "B:%s", 
   "C:%c", 
   "D:%S"
  ]
 }, 
 {
  "A_CONTENT": "当uitabbarcontroller上的button多于（）个时出现morebutton", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:4", 
   "B:5", 
   "C:6", 
   "D:7"
  ]
 }, 
 {
  "A_CONTENT": "哪些是C语言的xml框架", 
  "B_ANSWER": "B,D", 
  "C_OPTIONS": [
   "A:NSXML", 
   "B:libxml2", 
   "C:touchXML", 
   "D:TinyXML"
  ]
 }, 
 {
  "A_CONTENT": "NSAutoreleasePool是如何管理内存的？", 
  "B_ANSWER": "C,D", 
  "C_OPTIONS": [
   "A:向release的对象发送消息，如果内存计数为0时，则销毁对象", 
   "B:向autorelease的对象发送消息，如果内存计数为0时，则销毁对象", 
   "C:线程池释放时，向release的对象发送消息，如果内存计数为0时，则销毁对象", 
   "D:线程池释放时，向autorelease的对象发送消息，如果内存计数为0时，则销毁对象"
  ]
 }, 
 {
  "A_CONTENT": "\"NSString* str = [NSString stringWithFormat:@\"\"\"%@\"\"\",@\"\"\"ssss\"\"\"];NSString *str1 = [str copy];NSLog(@\"\"\"%d %d\"\"\",[str retainCount], [str1 retainCount]);选出以下表述正确的\"", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:str 和 str1 指向同一块内存地址，运行结果 1,1", 
   "B:str 和str1 指向不同的地址,运行结果2，2", 
   "C:str 和 str1 指向同一块内存地址，运行结果 2,2", 
   "D:str 和str1 指向不同的地址,运行结果1，2"
  ]
 }, 
 {
  "A_CONTENT": "从什么时候开始iphone支持高清图", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:iphone3", 
   "B:iphone3gs", 
   "C:iphone4", 
   "D:iphone5"
  ]
 }, 
 {
  "A_CONTENT": "若iPad键盘在弹出状态，左右横屏翻转时，则会先发送什么消息？", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:UIKeyboardWillHideNotification", 
   "B:UIKeyboardWillShowNotification", 
   "C:UIKeyboardDidShowNotification", 
   "D:UIKeyboardDidHideNotification"
  ]
 }, 
 {
  "A_CONTENT": "iphone开发是通过什么实现列表的", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:UITableView", 
   "B:UIListView", 
   "C:UIFormView", 
   "D:以上说法都不对"
  ]
 }, 
 {
  "A_CONTENT": "\"NSMutableArray* ary = [[NSMutableArray array] retain];NSString *str = [NSString stringWithFormat:@\"\"\"test\"\"\"];[str retain];[ary addObject:str];NSLog(@\"\"\"%d\"\"\",[str retainCount]);输出多少？\"", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:1", 
   "B:2", 
   "C:3", 
   "D:4"
  ]
 }, 
 {
  "A_CONTENT": "每次viewcontroller中view出现的时候都会加载（）", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:viewdidload", 
   "B:viewwillappear", 
   "C:viewdidunload", 
   "D:viewwilldisappear"
  ]
 }, 
 {
  "A_CONTENT": "IOS系统支持以下哪些数据库?", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:mysql", 
   "B:sqlite", 
   "C:oracel", 
   "D:mydb"
  ]
 }, 
 {
  "A_CONTENT": "哪些是用来自动生成getset方法的（）", 
  "B_ANSWER": "C,D", 
  "C_OPTIONS": [
   "A:@interface", 
   "B:@class", 
   "C:@property", 
   "D:@sythesize"
  ]
 }, 
 {
  "A_CONTENT": "关于c和obj-c混用下列说法错误的是", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:后缀为m的文件，识别obj-c和c的代码", 
   "B:后缀为mm的文件，识别obj-c，c，c++", 
   "C:后缀为cpp的文件，只能用c/c++代码", 
   "D:cpp文件include的头文件中，可以出现obj-c代码"
  ]
 }, 
 {
  "A_CONTENT": "代理是通过什么实现的", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:类", 
   "B:协议", 
   "C:抽象类", 
   "D:虚类"
  ]
 }, 
 {
  "A_CONTENT": "objectivec常用的文件后缀是（）", 
  "B_ANSWER": "A,B,D", 
  "C_OPTIONS": [
   "A:.h", 
   "B:.mm", 
   "C:.c", 
   "D:.m"
  ]
 }, 
 {
  "A_CONTENT": "UIGestureRecognizer是哪个ios版本出现的", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:2", 
   "B:3.2", 
   "C:4.1", 
   "D:5"
  ]
 }, 
 {
  "A_CONTENT": "对栈和堆的说法正确的是：", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:栈由编译器自动管理，无需手工控制，堆的释放由程序员控制，容易产生memory leak", 
   "B:栈是向低地址扩展的数据结构，是一块连续的内存的区域", 
   "C:堆是向高地址扩展的数据结构，是不连续的内存区域", 
   "D:堆都是动态分配的，栈有可以静态分配和动态分配"
  ]
 }, 
 {
  "A_CONTENT": "关于单例的说法哪些是正确的", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:整个程序生命周期最多只有一个对象实例", 
   "B:整个程序生命周期最多只有一个类", 
   "C:整个程序生命周期必须有一个对象实例", 
   "D:都不正确"
  ]
 }, 
 {
  "A_CONTENT": "执行以下方法后，引用计数为多少，[abc retain];[abc release];self.abc=nil", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:0", 
   "B:1", 
   "C:-1", 
   "D:-2"
  ]
 }, 
 {
  "A_CONTENT": "哪些是iphone和ipad都有的类（）", 
  "B_ANSWER": "B,C", 
  "C_OPTIONS": [
   "A:UISplitViewController", 
   "B:UITabbarController", 
   "C:UIAlertView", 
   "D:UIPopoverController"
  ]
 }, 
 {
  "A_CONTENT": "哪些不是iphone开发的类", 
  "B_ANSWER": "B,D", 
  "C_OPTIONS": [
   "A:UILabel", 
   "B:NSView", 
   "C:NSString", 
   "D:NSLabel"
  ]
 }, 
 {
  "A_CONTENT": "扩展系统类方法可以用", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:Categories", 
   "B:Protocol", 
   "C:Class", 
   "D:Interface"
  ]
 }, 
 {
  "A_CONTENT": "iOS应用版本覆盖安装时，不会被覆盖的目录有", 
  "B_ANSWER": "B,C,D", 
  "C_OPTIONS": [
   "A:应用bundle目录", 
   "B:Documents", 
   "C:Library", 
   "D:tmp"
  ]
 }, 
 {
  "A_CONTENT": "哪些是可以进行sax解析xml", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:NSXML", 
   "B:libxml2", 
   "C:touchXML", 
   "D:GDataXML"
  ]
 }, 
 {
  "A_CONTENT": "以下类型哪些不是Objective-C的基本类型？", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:NSObject", 
   "B:NSString", 
   "C:NSIntenger", 
   "D:CGFloat"
  ]
 }, 
 {
  "A_CONTENT": "什么情况下会使用@class标记？", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:循环引用", 
   "B:弱引用", 
   "C:将协议转化为类", 
   "D:标记该文件是个类"
  ]
 }, 
 {
  "A_CONTENT": "对于语句NSString*obj = [[NSData alloc] init]; obj在编译时和运行时分别是什么类型的对象？", 
  "B_ANSWER": "A,D", 
  "C_OPTIONS": [
   "A:编译时是NSString的类型", 
   "B:编译时是NSData的类型", 
   "C:运行时是NSString类型的对象", 
   "D:运行时是NSData类型的对象"
  ]
 }, 
 {
  "A_CONTENT": "以下哪个是弹出告警对话框使用的类", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:UIAlertView", 
   "B:UIWarningView", 
   "C:UIErrorView", 
   "D:UIPopView"
  ]
 }, 
 {
  "A_CONTENT": "\"UIImage *imga = [UIImage imageWithNamed:@\"\"\"abc.png\"\"\"];UIImage *imgb = [UIImage imageWithNamed:@\"\"\"abc.png\"\"\"];\"", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:imga与imgb指向的内存地址相同", 
   "B:imga与imgb占用两块不同的内存", 
   "C:imga的内存需要手动释放", 
   "D:imgb的内存需要手动释放"
  ]
 }, 
 {
  "A_CONTENT": "\"int i, j, sum;i = 100;sum = i + j;关于上述代码说法错误的是？\"", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:j没有初始化；", 
   "B:多个变量不能声明在同一行；", 
   "C:sum初始化不正确；", 
   "D:这段代码没有任何问题、"
  ]
 }, 
 {
  "A_CONTENT": "代码中的每行文本不要超过（）个字符的长度。", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:60", 
   "B:70", 
   "C:80", 
   "D:120"
  ]
 }, 
 {
  "A_CONTENT": "NSMutableString及NSString有何种关系？", 
  "B_ANSWER": "A,C", 
  "C_OPTIONS": [
   "A:NSMutableString为可变字符串，修改字符串时内存地址不会改变;", 
   "B:NSMutableString是NSString的类别;", 
   "C:NSMutableString是NSString的子类;", 
   "D:NSMutableString与NSString是两个完全不同的类;"
  ]
 }, 
 {
  "A_CONTENT": "Uilabel可以设置哪些东西", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:字体", 
   "B:字体颜色", 
   "C:文本内容", 
   "D:不同的颜色"
  ]
 }, 
 {
  "A_CONTENT": "objectivec中自带statusbar可以定义成", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:默认颜色", 
   "B:黑色", 
   "C:黑色透明", 
   "D:任意颜色"
  ]
 }, 
 {
  "A_CONTENT": "iphone如何在后台获取服务器信息", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:跑一个后台线程获取服务器数据", 
   "B:使用push notification", 
   "C:服务器直接推送数据到客户端", 
   "D:以上都不正确"
  ]
 }, 
 {
  "A_CONTENT": "iPhone OS 应用程序的基础Cocoa Touch框架包含下列哪些？", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:Core Animation", 
   "B:Core Audio", 
   "C:Core Data", 
   "D:UIKit"
  ]
 }, 
 {
  "A_CONTENT": "以下哪些是UIControl的子类？", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:UIView", 
   "B:UIButton", 
   "C:UILabel", 
   "D:UIWebView"
  ]
 }, 
 {
  "A_CONTENT": "IOS模拟器不支持,必须使用真机调试的功能有？", 
  "B_ANSWER": "A,C,D", 
  "C_OPTIONS": [
   "A:录制视频", 
   "B:播放视频", 
   "C:GPS", 
   "D:陀螺仪"
  ]
 }, 
 {
  "A_CONTENT": "以下哪些情况会调用applicationWillResignActive:（iOS版本>=5.0）？", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:来电", 
   "B:锁屏", 
   "C:按Home键", 
   "D:通知栏拉下"
  ]
 }, 
 {
  "A_CONTENT": "下列说法正确的是", 
  "B_ANSWER": "A,C", 
  "C_OPTIONS": [
   "A:retain会让retaincount加一", 
   "B:autoretain会让retaincount加一", 
   "C:autorelease pool不用考虑retaincount"
  ]
 }, 
 {
  "A_CONTENT": "应用程序退到后台并彻底关闭，其执行顺序是：", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:applicationWillResignActive->applicationWillTerminate->applicationDidEnterBackground", 
   "B:applicationDidEnterBackground->applicationWillTerminate->applicationWillResignActive", 
   "C:applicationDidEnterBackground->applicationWillResignActive->applicationWillTerminate", 
   "D:applicationWillResignActive->applicationDidEnterBackground->applicationWillTerminate"
  ]
 }, 
 {
  "A_CONTENT": "\"判断结果：main() {    int a[5]={1,2,3,4,5};    int *ptr=(int *)(&a+1);     printf(\"\"\"%d,%d\"\"\",*(a+1),*(ptr-1));}\"", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:2,5", 
   "B:1,2", 
   "C:2,1", 
   "D:2,2"
  ]
 }, 
 {
  "A_CONTENT": "objectivec中定义抽象函数的是（）", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:Categories", 
   "B:Protocol", 
   "C:Class", 
   "D:Interface"
  ]
 }, 
 {
  "A_CONTENT": "CLGeocoder是哪个ios版本出现的", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:2", 
   "B:3.2", 
   "C:4.1", 
   "D:5"
  ]
 }, 
 {
  "A_CONTENT": "哪些是sdk自带的xml框架", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:NSXML", 
   "B:libxml2", 
   "C:touchXML", 
   "D:GDataXML"
  ]
 }, 
 {
  "A_CONTENT": "Xcode支持编译以下格式的源代码文件", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:*.cpp", 
   "B:*.mm", 
   "C:*.c", 
   "D:*.m"
  ]
 }, 
 {
  "A_CONTENT": "关于内存释放，以下说法错误的是？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:alloc的对象需要释放", 
   "B:静态对象不需要释放", 
   "C:new的对象需要释放", 
   "D:自动释放的对象一定会自动释放"
  ]
 }, 
 {
  "A_CONTENT": "以下哪种手段可为已存在的类增加新的方法？", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:继承", 
   "B:协议", 
   "C:类别", 
   "D:实例化"
  ]
 }, 
 {
  "A_CONTENT": "ARC是什么（）", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:GC机制", 
   "B:autorelease", 
   "C:编译时内存管理", 
   "D:自动内存释放池"
  ]
 }, 
 {
  "A_CONTENT": "UITableView 如何刷新数据？", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:importData", 
   "B:reloadData", 
   "C:insertData", 
   "D:refreshData"
  ]
 }, 
 {
  "A_CONTENT": "哪个是声明接口的（）", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:@interface", 
   "B:@class", 
   "C:@property", 
   "D:@protocol"
  ]
 }, 
 {
  "A_CONTENT": "XCODE下的重要快捷键CMD + B的含义是？", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:调试程序", 
   "B:编译并运行", 
   "C:编译", 
   "D:运行"
  ]
 }, 
 {
  "A_CONTENT": "每次viewcontroller中view切换消失的时候都会加载（）", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:viewdidload", 
   "B:viewwillappear", 
   "C:viewdidunload", 
   "D:viewwilldisappear"
  ]
 }, 
 {
  "A_CONTENT": "关于protocol哪些是正确的", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:可以声明成员变量", 
   "B:可以声明方法", 
   "C:可以继承protocol", 
   "D:可以实现方法"
  ]
 }, 
 {
  "A_CONTENT": "下列NSString * test的比较操作正确的是（）", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:\"\"\"\"abc\"\"\" ！= test\"", 
   "B:@\"abc\" ！= test", 
   "C:test ！= @\"abc\"", 
   "D:test ！= nil"
  ]
 }, 
 {
  "A_CONTENT": "关于xml和json描述错误的是？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:xml与json通常用来网络传输数据", 
   "B:相同条件下，json的效率比xml高", 
   "C:json一种轻量级的数据交换格式", 
   "D:Json便于阅读"
  ]
 }, 
 {
  "A_CONTENT": "iphone自带的数据库是（）", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:oracle", 
   "B:db2", 
   "C:sqlite", 
   "D:mysql"
  ]
 }, 
 {
  "A_CONTENT": "IOS 4.0之后支援正则表达式，以下表达式正确的是？", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:匹配腾讯QQ号：[1-9][0-9]{4,} 评注：腾讯QQ号从10000开始", 
   "B:匹配中国邮政编码：[1-9]d{5}(?!d) 评注：中国邮政编码为6位数字", 
   "C:匹配身份证：d{15}|d{18} 评注：中国的身份证为15位或18位", 
   "D:匹配国内电话号码：d{3}-d{8}|d{4}-d{7} 评注：匹配形式如 0511-4405222 或 021-87888822"
  ]
 }, 
 {
  "A_CONTENT": "代理的左右有哪些？", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:改变或传递控制链", 
   "B:允许一个类在某些特定时刻通知到其他类", 
   "C:可以减少框架复杂度", 
   "D:实现回调"
  ]
 }, 
 {
  "A_CONTENT": "关于@property，以下正确的是？", 
  "B_ANSWER": "B,C", 
  "C_OPTIONS": [
   "A:设置类的配置属性", 
   "B:让系统自动生成设置方法和获取方法", 
   "C:需要使用@synthesize来标识", 
   "D:支持内存自动回收"
  ]
 }, 
 {
  "A_CONTENT": "以下说法正确的是（）", 
  "B_ANSWER": "A,C", 
  "C_OPTIONS": [
   "A:iphone可读写通讯录", 
   "B:iphone开发可收发短信", 
   "C:iphone开发可收发邮件", 
   "D:iphone开发可获取通话记录"
  ]
 }, 
 {
  "A_CONTENT": "isKindOfClass和isMemberOfClass的说法正确的是？", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:isKindOfClass:classObj判断是否是这个类或者这个类的子类的实例", 
   "B: isMemberOfClass:classObj 判断是否是这个类的实例", 
   "C: isKindOfClass:classObj判断是否是这个类的实例", 
   "D: isMemberOfClass:classObj 判断是否是这个类或者这个类的子类的实例"
  ]
 }, 
 {
  "A_CONTENT": "在哪边设置程序图标", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:程序plist里", 
   "B:document目录里", 
   "C:pch文件里", 
   "D:系统头文件里"
  ]
 }, 
 {
  "A_CONTENT": "float mf = 2012.2013,NSLog(@\"2+3=%2.3f\",mf);请问下列哪个输出项是正确的？", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:2+3=5", 
   "B:2+3=2012.2013", 
   "C:2+3=2012.201", 
   "D:2+3=12.201"
  ]
 }, 
 {
  "A_CONTENT": "下列说法正确的是：", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:当代码执行autorelease，就会立即去清理线程池中的不再有引用的对象，", 
   "B:当获得一个对象时,若该对象的retaincount为1,而且对象已被设为autorelease,仍然需要release来确保该对象能被释放", 
   "C:delegate的属性最好使用assign，而不使用retain", 
   "D:最新的Xcode还没有垃圾回收机制"
  ]
 }, 
 {
  "A_CONTENT": "property中可能会使对象retaincount加1的关键字是", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:retain", 
   "B:copy", 
   "C:assign", 
   "D:nonatomic"
  ]
 }, 
 {
  "A_CONTENT": "@interface Fraction (MathOps) <NSCopying, NSCoding>", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:声明了一个类别", 
   "B:该类实现了两个协议", 
   "C:继承了一个类", 
   "D:该代码无意义"
  ]
 }, 
 {
  "A_CONTENT": "ios项目icon图片命名规则说法正确的是：", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:非Retina设备icon图片都命名为name.png", 
   "B:Retina 的icon图片命名为name@2x.png", 
   "C:iPhone5的icon图片命名为name@4x.png", 
   "D:Retina 的icon图片命名为name2x@.png"
  ]
 }, 
 {
  "A_CONTENT": "下列关于图片说法正确的是()", 
  "B_ANSWER": "A,D", 
  "C_OPTIONS": [
   "A:图片名字在模拟器中大小写无关", 
   "B:图片名字在模拟器中大小写敏感", 
   "C:图片名字在真机中大小写无关", 
   "D:图片名字在真机中大小写敏感"
  ]
 }, 
 {
  "A_CONTENT": "iOS中可以有哪些持久化数据的方式", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:属性列表", 
   "B:对象归档", 
   "C:SQLite3", 
   "D:Core Data"
  ]
 }, 
 {
  "A_CONTENT": "按home键后能继续在后台执行完的程序", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:播放音乐的程序", 
   "B:GPS 程序", 
   "C:VOIP 程序", 
   "D:Newsstand 以及周边配件附属的程序"
  ]
 }, 
 {
  "A_CONTENT": "如何使用高清图（）", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:在高清图片的名字之后加@", 
   "B:把图片放入高清文件件", 
   "C:只需把图片分辨率加大", 
   "D:以上都不正确"
  ]
 }, 
 {
  "A_CONTENT": "关于release和autorelease说法正确的是：", 
  "B_ANSWER": "A,B", 
  "C_OPTIONS": [
   "A:当使用new,alloc创建对象时，对象的count retain到1。可以用release 或 autolease释放掉对象", 
   "B:工程使用ARC，不能手动在代码中调用 release, autorelease等", 
   "C:当A通过一个方法获得一个B对象时，若retain了该对象，并不需要A去release，因为B在其他地方会释放", 
   "D:所有数据类型和对象都可以使用retain"
  ]
 }, 
 {
  "A_CONTENT": "下列Objective-C说法正确的是：", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:所有类都是NSObject 的子类", 
   "B:多重继承用protocol委托代理来实现", 
   "C:一个指针可以是volatile", 
   "D:有私有方法"
  ]
 }, 
 {
  "A_CONTENT": "下列哪些是正确的（）", 
  "B_ANSWER": "B,D", 
  "C_OPTIONS": [
   "A:iphone能从外接u盘读取数据", 
   "B:ipad能从外接u盘读取数据", 
   "C:iphone能从http服务器读取数据", 
   "D:ipad能从http服务器读取数据"
  ]
 }, 
 {
  "A_CONTENT": "下列关于objective-c表述正确的是：", 
  "B_ANSWER": "A,C,D", 
  "C_OPTIONS": [
   "A:objective-c只支持单继承", 
   "B:objective-c支持多重继承", 
   "C:objective-c可以实现多个接口", 
   "D:objective-c可以通过协议实现多重继承"
  ]
 }, 
 {
  "A_CONTENT": "ios的相机功能增强了哪些（）", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:裁剪与旋转", 
   "B:移除照片红眼", 
   "C:轻按一下改善照片", 
   "D:将照片整理成相簿"
  ]
 }, 
 {
  "A_CONTENT": "下列关于单例说法正确的是：", 
  "B_ANSWER": "B,C,D", 
  "C_OPTIONS": [
   "A:单例不需要释放，也无法释放，只有在杀掉程序时才能释放掉", 
   "B:创建单例时，常用synchronized进行控制，这是为了解决多线程问题", 
   "C:给对象传值时，常用单例模式和代理", 
   "D:NSApplication，NSUserDefaults等就是单例模式的应用"
  ]
 }, 
 {
  "A_CONTENT": "在16位机上，用预处理指令#define声明一个常数，用以表明1年中有多少秒（忽略闰年问题），下列写法正确的是：", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:#define SECONDS_PER_YEAR 60 * 60 * 24 * 365", 
   "B:#define SECONDS_PER_YEAR (60 * 60 * 24 * 365)UL", 
   "C:#define SECONDS_PER_YEAR (60 * 60 * 24 * 365)", 
   "D:#define SECONDS_PER_YEAR (60 * 60 * 24 * 365)L;"
  ]
 }, 
 {
  "A_CONTENT": "下列关于内存管理正确的是", 
  "B_ANSWER": "A,C", 
  "C_OPTIONS": [
   "A:过度释放内存会crash", 
   "B:内存泄露不会crash", 
   "C:内存泄露会导致内存占用无法收回", 
   "D:过度释放内存不一定会crash"
  ]
 }, 
 {
  "A_CONTENT": "下面关于堆和栈表述不正确的是", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:栈是向低地址扩展的数据结构，是一块连续的内存的区域，", 
   "B:堆是向高地址扩展的数据结构，是不连续的内存区域", 
   "C:堆和栈有2种分配方式：静态分配和动态分配", 
   "D:堆易造成碎片"
  ]
 }, 
 {
  "A_CONTENT": "\"看下面的程序，解出NSLOG输出结果 NSMutableArray* ary = [[NSMutableArray array] retain]; NSString* str = [NSString stringWithFormat:@\"\"\"test\"\"\"]; [str retain]; [ary addObject:str]; NSLog(@\"\"\"%@%d\"\"\",str,[str retainCount]); [str retain]; [str release]; [str release]; NSLog(\"\"\"%@%d\"\"\",str,[str retainCount]); [ary removeAllObjects]; NSLog(@\"\"\"%@%d\"\"\",str,[str retainCount]);\"", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:3 2 1", 
   "B:2 2 1", 
   "C:2 1 0", 
   "D:1 1 0"
  ]
 }, 
 {
  "A_CONTENT": "常量规范（）", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:使用小写k开头的驼峰法", 
   "B:使用小写m开头的驼峰法命名", 
   "C:大写K开头的驼峰命名法。", 
   "D:大写M开头的驼峰命名法。"
  ]
 }, 
 {
  "A_CONTENT": "关于UIView的bounds及frame属性，下列说法正确的是：", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:bounds与frame完全相同", 
   "B:bounds.size与frame.size相同", 
   "C:bounds.origin与frame.origin相同", 
   "D:bounds与frame始终不相同"
  ]
 }, 
 {
  "A_CONTENT": "循环语句for (expression1; expression2; expression3) statement;其中expression2会在何时执行？", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:expression1之前", 
   "B:statement之前", 
   "C:statement之后", 
   "D:expression3之后"
  ]
 }, 
 {
  "A_CONTENT": "有关nil、Nil和Null的说法正确的是？", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:nil是一个对象指针为空", 
   "B:Nil是一个类指针为空", 
   "C:NULL是基本数据类型为空", 
   "D:以上全都不正确"
  ]
 }, 
 {
  "A_CONTENT": "以下关于Uitableviewcontroller的说法正确的是（）", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:可以在控制器中加1个Uitableviewcontroller", 
   "B:可以在控制器中加2个Uitableviewcontroller", 
   "C:可以在控制器中加任意个Uitableviewcontroller", 
   "D:以上说法都存在歧义。"
  ]
 }, 
 {
  "A_CONTENT": "下列哪些是ios5的新特性（）", 
  "B_ANSWER": "B,C,D", 
  "C_OPTIONS": [
   "A:通知", 
   "B:通知中心", 
   "C:内建Twitter支持", 
   "D:报刊杂志"
  ]
 }, 
 {
  "A_CONTENT": "以下功能在IPAD上不能实现的是？", 
  "B_ANSWER": "C,D", 
  "C_OPTIONS": [
   "A:通过WIFI发微博", 
   "B:浏览超过4096*2048分辨率的图片", 
   "C:安装Android应用程序", 
   "D:安装Mac应用程序"
  ]
 }, 
 {
  "A_CONTENT": "对象aObject的一个public实例变量_variable声明了属性@property SomaClass *variable;实现了getter、setter:@synthesize variable = _variable;以下哪些方法可以访问此实例变量？", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:aObject.variable", 
   "B:aObject->variable", 
   "C:[aObject variable]", 
   "D:[aObject _variable]"
  ]
 }, 
 {
  "A_CONTENT": "XCODE下的重要快捷键CMD + Shift + K的含义是？", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:调试程序", 
   "B:清理", 
   "C:清理并运行", 
   "D:清理并调试程序"
  ]
 }, 
 {
  "A_CONTENT": "UIView可以设置哪些属性", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:背景图片", 
   "B:颜色", 
   "C:大小", 
   "D:透明度"
  ]
 }, 
 {
  "A_CONTENT": "IOS开发的项目中XX_Prefix.pch的作用是？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:初始化工程配置", 
   "B:初始化xib文件", 
   "C:预链接xib文件", 
   "D:预链接头文件"
  ]
 }, 
 {
  "A_CONTENT": "对NSString * test赋值为空指针怎么写是正确的？", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:test = nil;", 
   "B:test = NULL;", 
   "C:test = @\"\"\";", 
   "D:test = \"\"\";"
  ]
 }, 
 {
  "A_CONTENT": "Objective-C语言的特性有哪些？", 
  "B_ANSWER": "B,C", 
  "C_OPTIONS": [
   "A:多继承", 
   "B:协议和委托", 
   "C:类别", 
   "D:命名空间"
  ]
 }, 
 {
  "A_CONTENT": "- (void)setVar:(int)n;", 
  "B_ANSWER": "A,B,D", 
  "C_OPTIONS": [
   "A:声明了一个叫做setVar:的实例方法", 
   "B:有一个整型参数", 
   "C:返回值为整型", 
   "D:无返回值"
  ]
 }, 
 {
  "A_CONTENT": "ios支持哪些视频格式（）", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:mp4", 
   "B:3gp", 
   "C:mov", 
   "D:avi"
  ]
 }, 
 {
  "A_CONTENT": "NSDictionary可存储的类型可以有：", 
  "B_ANSWER": "A,B,C", 
  "C_OPTIONS": [
   "A:NSArray", 
   "B:NSNumber", 
   "C:NSDictionary", 
   "D:NSInteger"
  ]
 }, 
 {
  "A_CONTENT": "对一个算法的评价，不包括（）", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:健壮性和可读性", 
   "B:并行性", 
   "C:正确性", 
   "D:时空复杂度"
  ]
 }, 
 {
  "A_CONTENT": "何时会导致对象aObject引用计数加1？", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:[aObject retain];", 
   "B:[aObject autorelease];", 
   "C:[aObject release];", 
   "D:[aObject retainCount];"
  ]
 }, 
 {
  "A_CONTENT": "IOS 沙盒（sandbox）的作用是？", 
  "B_ANSWER": "A", 
  "C_OPTIONS": [
   "A:让每个应用程序都有自己的存储空间", 
   "B:让每个应用程序都有自己的运行内存空间", 
   "C:存放IPA文件", 
   "D:存放零散的文件"
  ]
 }, 
 {
  "A_CONTENT": "下列哪条语句c值的结果为0：", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:double a = 2; double b = 3; int c = a / b;", 
   "B:int a = 2; float b = 3; int c = a / b;", 
   "C:float a = 2; int b = 3; int c = a / b;", 
   "D:int a = 2; int b = 3; int c = a / b;"
  ]
 }, 
 {
  "A_CONTENT": "发布IOS应用程序，造成审核不通过的原因可能有？", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:使用了私有API", 
   "B:模仿系统的应用程序", 
   "C:NSZombieEnabled设为YES", 
   "D:经常挂机"
  ]
 }, 
 {
  "A_CONTENT": "苹果自带的地图在ios5中使用的数据是哪家的", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:高德", 
   "B:百度", 
   "C:google", 
   "D:微软"
  ]
 }, 
 {
  "A_CONTENT": "那种情况，被复制的对象释放后，引用复制的对象会引起crash", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:深拷贝", 
   "B:浅拷贝", 
   "C:深拷贝，浅拷贝", 
   "D:都不会引起crash"
  ]
 }, 
 {
  "A_CONTENT": "NSNotification 如何发送接收通知？", 
  "B_ANSWER": "D", 
  "C_OPTIONS": [
   "A:sendNotification和receiveNotification", 
   "B:sendNotification和addObserver", 
   "C:postNotification和receiveNotification", 
   "D:postNotification和addObserver"
  ]
 }, 
 {
  "A_CONTENT": "在iOS开发中MVC的机制被使用的淋漓尽致，下面对MVC模式理解正确的是：", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:MVC设计模式考虑三种对象：模型对象、视图对象、和控制器对象", 
   "B:模型对象代表 特别的知识和专业技能，它们负责保有应用程序的数据和定义操作数据的逻辑", 
   "C:。视图对象知道如何显示应用程序的模型数据，而且可能允许用户对其进行编辑", 
   "D:控制器对象是应用程序的视图对象和模型对象之间的协调者"
  ]
 }, 
 {
  "A_CONTENT": "NSLog如何打印unsigned char型", 
  "B_ANSWER": "C", 
  "C_OPTIONS": [
   "A:%f", 
   "B:%d", 
   "C:%c", 
   "D:%S"
  ]
 }, 
 {
  "A_CONTENT": "以下哪些方法可正确输出一UIView实例aView的中心点坐标？", 
  "B_ANSWER": "B,C,D", 
  "C_OPTIONS": [
   "A:NSLog(@\"%@\", aView.center);", 
   "B:NSLog(@\"%.2f, %.2f\", aView.center.x, aView.center.y);", 
   "C:NSLog(@\"%@\", NSStringFromCGPoint(aView.center));", 
   "D:NSLog(@\"%.2f, %.2f\", CGRectGetMidX(aView.frame), CGRectGetMidY(aView.frame));"
  ]
 }, 
 {
  "A_CONTENT": "以下不数据UIView的方法是？", 
  "B_ANSWER": "B", 
  "C_OPTIONS": [
   "A:initWithFrame", 
   "B:viewDidLoad", 
   "C:addSubView", 
   "D:removeFromSuperView"
  ]
 }, 
 {
  "A_CONTENT": "CLLocation可以获得哪些信息", 
  "B_ANSWER": "A,B,C,D", 
  "C_OPTIONS": [
   "A:经度", 
   "B:纬度", 
   "C:海拔", 
   "D:方向"
  ]
 }
]